

import adsk.core, adsk.fusion, adsk.cam, traceback
import os
import os.path

COMMAND_ID = "Airfoil"
SE01_SELECTION1_COMMAND_ID = "select spline"
IN01_VALUE_INPUT_ID = "Airfoilname"
IN02_VALUE_INPUT_ID = "Airfoilname"


_handlers = []

ui = None
app = adsk.core.Application.get()
if app:
    ui = app.userInterface


product = app.activeProduct
design = adsk.fusion.Design.cast(product)
root = design.rootComponent
sketches = root.sketches
planes = root.constructionPlanes




class FoilCommandExecuteHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            command = args.firingEvent.sender
            inputs = command.commandInputs

            if inputs.itemById(SE01_SELECTION1_COMMAND_ID).selection(0).isValid == True:
                spline = inputs.itemById(SE01_SELECTION1_COMMAND_ID).selection(0).entity

            name = inputs.itemById(IN01_VALUE_INPUT_ID)
            count = inputs.itemById(IN02_VALUE_INPUT_ID)
           
            foil = Foil()
            foil.Execute(spline, name.value, count.value)

        except:
            if ui:
                ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))


class FoilCommandDestroyHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            adsk.terminate()
        except:
            if ui:
                ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))


class Foil:
    def Execute(self, spline, name, punkte):

        sketchP = spline.parentSketch
        planeP = sketchP.referencePlane

        punkte = 121
        for i in range(1, punkte):
            spline.addFitPoint(i/punkte)

        pointlist = spline.fitPoints

        arrayp = []
        for i in range(pointlist.count):
            arrayp.append(pointlist.item(i).geometry.asArray())
        
        rootlength = arrayp[0][0]
        scaled = [(arrayp[i][0] / rootlength, arrayp[i][1] / rootlength) for i in range(len(arrayp))]

        #ui.messageBox(str(scaled))

        msg = ''
        # Set styles of file dialog.
        fileDlg = ui.createFileDialog()
        fileDlg.isMultiSelectEnabled = True
        fileDlg.title = 'Fusion Open File Dialog'
        fileDlg.filter = '*.dat'
        
       
        # Show file save dialog
        fileDlg.title = 'Fusion Save File Dialog'
        dlgResult = fileDlg.showSave()
        if dlgResult == adsk.core.DialogResults.DialogOK:
            msg += '\nFile to Save: {}'.format(fileDlg.filename)
        else:
            return
            
        filename = fileDlg.filename
        
        
        ui.messageBox(msg)



        def write_airfoil_dat(filename, airfoilname, points):
            with open(filename, 'w') as file:
                file.write(f"{airfoilname}\n")
                for x, y in points:
                    if y < 0:
                        file.write(f"  {x:.6f} {y:.6f}\n")
                    else:
                        file.write(f"  {x:.6f}  {y:.6f}\n")
            
        
        write_airfoil_dat(filename, name, scaled)
       
class FoilCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args: adsk.core.CommandEventArgs):
        try:

            onExecute = FoilCommandExecuteHandler()
            args.command.execute.add(onExecute)
            _handlers.append(onExecute)

            onDestroy = FoilCommandDestroyHandler()
            args.command.destroy.add(onDestroy)
            _handlers.append(onDestroy)

            inputs = args.command.commandInputs

            inst_text1 = """ <p><strong>Instructions:</strong></p> \
                <p>Sketch Airfoil as FittedSpline on xy-Plane beginning at the tail of the top. Go to the nose at the sketch origin and from there sketch the bottom to the tail.\
                
            """

            i1 = inputs.addSelectionInput(SE01_SELECTION1_COMMAND_ID, SE01_SELECTION1_COMMAND_ID, "select spline")
            i1.addSelectionFilter(adsk.core.SelectionCommandInput.SketchCurves)
            i1.setSelectionLimits(0, 1)
            i2 = inputs.addStringValueInput(IN01_VALUE_INPUT_ID, "Airfoilname", "Airfoilname") 
            i3 = inputs.addStringValueInput(IN02_VALUE_INPUT_ID, "Punkte hinzuf√ºgen", "100")
            i4 = inputs.addTextBoxCommandInput('fullWidth_textBox', '', inst_text1, 12, True)

           

           
        except:
            if ui:
                ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))


def run(context):
    try:

        cmdDef = ui.commandDefinitions.itemById(COMMAND_ID)
        if not cmdDef:
            cmdDef = ui.commandDefinitions.addButtonDefinition(COMMAND_ID, 'Save to DAT', 'Save to DAT')
        onCommandCreated = FoilCommandCreatedHandler()

        cmdDef.commandCreated.add(onCommandCreated)
        _handlers.append(onCommandCreated)

        
        cmdDef.execute()
        adsk.autoTerminate(False)

    except:
        if ui:
            ui.messageBox('Failed:\n{}'.format(traceback.format_exc()))



    
